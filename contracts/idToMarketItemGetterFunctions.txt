*** Funtions for fetching items using the idToMarketItem ***

/* Fetches one token by tokenId */
function fetchItemByTokenId(
    uint256 tokenId
) public view returns (MarketItem memory) {
    uint256 totalItemCount = _itemIds.current();
    MarketItem[] memory items = new MarketItem[](1);

    for (uint256 i = 0; i < totalItemCount; i++) {
        if (idToMarketItem[i + 1].tokenId == tokenId) {
            uint256 currentId = i + 1;
            MarketItem storage item = idToMarketItem[currentId];
            items[0] = item;
        }
    }
    return items[0];
}

/* Fetches multiple tokens by tokenIds */
function fetchItemsByTokenIds(
    uint256[] memory tokenIds
) public view returns (MarketItem[] memory) {
    uint256 totalItemCount = _itemIds.current();
    uint256 tokenIdsLength = tokenIds.length;
    uint256 currentIndex = 0;
    MarketItem[] memory items = new MarketItem[](tokenIdsLength);

    for (uint256 i = 0; i < totalItemCount; i++) {
        uint256 tokenId = tokenIds[currentIndex];
        if (idToMarketItem[i + 1].tokenId == tokenId) {
            uint256 currentId = i + 1;
            MarketItem storage item = idToMarketItem[currentId];
            items[currentIndex] = item;
            currentIndex += 1;
        }
    }
    return items;
}

/* Returns items that the user has created or owns */
function fetchUserItems(
    address user
) public view returns (MarketItem[] memory) {
    uint256 totalItemCount = _itemIds.current();
    uint256 itemCount = 0;
    uint256 currentIndex = 0;

    for (uint256 i = 0; i < totalItemCount; i++) {
        if (idToMarketItem[i + 1].owner == user || idToMarketItem[i + 1].creator == user) {
            itemCount += 1;
        }
    }

    MarketItem[] memory items = new MarketItem[](itemCount);
    for (uint256 i = 0; i < totalItemCount; i++) {
        if (idToMarketItem[i + 1].owner == user || idToMarketItem[i + 1].creator == user) {
            uint256 currentId = i + 1;
            MarketItem storage currentItem = idToMarketItem[currentId];
            items[currentIndex] = currentItem;
            currentIndex += 1;
        }
    }
    return items;
}